getOutsideInfluenceScore = function(df, bandMembers){
new = df %>%
select(Name, ReleaseDate, WritingCredits) %>%
distinct() %>%
group_by(Name) %>%
do(data.frame(ReleaseDate = df$ReleaseDate, nonBandMemberWriters = countNonBandWriters(., bandMembers))) %>%
distinct()
new = new[complete.cases(new),] %>%
arrange(desc(ReleaseDate))
return(new)
}
archArtistInfluence = getOutsideInfluenceScore(archArtist, maroon5Members)
archArtistInfluence
maroon5Members= c("Adam Levine", "Jesse Carmichael", "Mickey Madden", "James Valentine", "Matt Flynn", "PJ Morton", "Sam Farrar", "Ryan Dusick")
countNonBandWriters = function(df, bandMembers){
if (is.na(df$WritingCredits)){
nonBandWriters = NA
} else{
writers = str_split(df$WritingCredits, ", ") %>%
unlist()
nonBandWriters = sum(!writers %in% bandMembers)
}
return(nonBandWriters)
}
getOutsideInfluenceScore = function(df, bandMembers){
new1 = df %>%
select(Name, WritingCredits) %>%
distinct() %>%
group_by(Name) %>%
do(data.frame(nonBandMemberWriters = countNonBandWriters(., bandMembers))) %>%
distinct()
new2 = df %>%
select(Name, ReleaseDate) %>%
distinct()
new = merge(new1, new2, by="Name", type= "full")
new = new[complete.cases(new), ] %>%
distinct() %>%
arrange(desc(ReleaseDate))
return(new)
}
archArtistInfluence = getOutsideInfluenceScore(archArtist, maroon5Members)
archArtistInfluence
library(qdap)
install.packages("qdap")
library(qdap)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("trinker/qdapDictionaries")
install_github("trinker/qdapRegex")
install_github("trinker/qdapTools")
install_github("trinker/qdap")
library(qdap)
install.packages("tm")
library(qdap)
library(devtools)
install_github("trinker/qdapDictionaries")
install_github("trinker/qdapRegex")
install_github("trinker/qdapTools")
install_github("trinker/qdap")
library(qdap)
noContraction = function(lyrics){
new = lyrics %>%
gsub("can't", "cannot", .) %>% #special n't
gsub("couldn't've", "could not have", .) %>%
gsub("mustn't've", "must not have", .) %>%
gsub("who'd've", "who would have", .) %>%
gsub("why'd", "why did", .) %>%
gsub("n't", " not", .) %>%
gsub("'ll", " will", .) %>%
gsub("'d", " would", .) %>%
gsub("n't", " not", .) %>%
gsub("'ve", " have", .) %>%
gsub("'re", " are", .) %>%
gsub("'cause", "because", .) %>%
gsub("there's", "there is", .) %>%
gsub("everyone's", "everyone is", .) %>%
gsub("she's", "she is", .) %>%
gsub("he's", "he is", .) %>%
gsub("it's", "it is", .) %>%
gsub("let's", "let us", .) %>%
gsub("how's", "how is", .) %>%
gsub("somebody's", "somebody is", .) %>%
gsub("someone's", "someone is", .) %>%
gsub("something's", "something is", .) %>%
gsub("that's", "that is", .) %>%
gsub("there's", "there is", .) %>%
gsub("what's", "what is", .) %>%
gsub("when's", "when is", .) %>%
gsub("where's", "where is", .) %>%
gsub("who's", "who is", .) %>%
gsub("gonna", "going to", .) %>%
gsub("gotta", "got to", .) %>%
gsub("gimme", "give me", .)%>%
gsub("tryna", "trying to", .) %>%
gsub("i'm'a", "i am about to", .)%>%
gsub("i'm", "i am", .) %>%
gsub("gimme", "give me", .) %>%
gsub("y'all", "you all", .)
return(new)
}
individualLyric = function(df){
newDf = df %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words) %>%
distinct()
return(newDf)
}
getLyricalComplexity = function(df){
lyricsDf = df %>%
select(Name, Lyrics) %>%
distinct() %>% #now have the lyrics of all of the songs
mutate(Lyrics = tolower(Lyrics)) %>% #Get all lyrics to be lower case
mutate(Lyrics = noContraction(Lyrics)) %>% #There are now no contractions besides possessives
#mutate(unlist(str_split(Lyrics, "\n", n = 1))) %>% ##############NEEED TO BE ABLE TO STRIP THE TITLE
mutate(Lyrics = gsub("[^a-z ]", " ", Lyrics)) #Remove what is not an english letter
individual = individualLyric(lyricsDf)
fullLyrics = individual %>%
group_by(Name) %>%
tally(name = "uniqueNonStop")
totalLyrics = lyricsDf %>%
unnest_tokens(word, Lyrics) %>%
group_by(Name) %>%
tally(name = "totalWords")
avgLen = individual %>%
group_by(Name) %>%
distinct() %>%
mutate(wordLength = nchar(word))%>%
mutate(wordSyllables = nsyllable(word, syllable_dictionary = quanteda::data_int_syllables,
use.names = FALSE)) %>%
select(Name, wordLength, wordSyllables) %>%
ddply(.,~Name, summarize, avgWordLen = mean(wordLength, na.rm = TRUE), avgSyllables = mean(wordSyllables))
#Get the total words by the duration
wordsByTime = df %>%
select(Name, DurationInSecs) %>%
distinct() %>%
full_join(totalLyrics, by = "Name") %>%
mutate(wordsPerSec = totalWords/DurationInSecs) %>%
select(Name, wordsPerSec)
new3 = join_all(list(fullLyrics, totalLyrics, avgLen, wordsByTime), by = "Name")
#new3 = join_all(list(fullLyrics, totalLyrics, avgLen), by = "Name")
new3$TotalToUniqueRatio = new3$totalWords/new3$uniqueNonStop
full = new3[complete.cases(new3), ]
scores = full %>%
do(data.frame(Name = full$Name, lyricalComplexity = full$avgWordLen + full$TotalToUniqueRatio + full$wordsByTime))
return(scores)
}
lyricalComplexDf = getLyricalComplexity(archArtist)
install.packages("quanteda")
library(quanteda)
noContraction = function(lyrics){
new = lyrics %>%
gsub("can't", "cannot", .) %>% #special n't
gsub("couldn't've", "could not have", .) %>%
gsub("mustn't've", "must not have", .) %>%
gsub("who'd've", "who would have", .) %>%
gsub("why'd", "why did", .) %>%
gsub("n't", " not", .) %>%
gsub("'ll", " will", .) %>%
gsub("'d", " would", .) %>%
gsub("n't", " not", .) %>%
gsub("'ve", " have", .) %>%
gsub("'re", " are", .) %>%
gsub("'cause", "because", .) %>%
gsub("there's", "there is", .) %>%
gsub("everyone's", "everyone is", .) %>%
gsub("she's", "she is", .) %>%
gsub("he's", "he is", .) %>%
gsub("it's", "it is", .) %>%
gsub("let's", "let us", .) %>%
gsub("how's", "how is", .) %>%
gsub("somebody's", "somebody is", .) %>%
gsub("someone's", "someone is", .) %>%
gsub("something's", "something is", .) %>%
gsub("that's", "that is", .) %>%
gsub("there's", "there is", .) %>%
gsub("what's", "what is", .) %>%
gsub("when's", "when is", .) %>%
gsub("where's", "where is", .) %>%
gsub("who's", "who is", .) %>%
gsub("gonna", "going to", .) %>%
gsub("gotta", "got to", .) %>%
gsub("gimme", "give me", .)%>%
gsub("tryna", "trying to", .) %>%
gsub("i'm'a", "i am about to", .)%>%
gsub("i'm", "i am", .) %>%
gsub("gimme", "give me", .) %>%
gsub("y'all", "you all", .)
return(new)
}
individualLyric = function(df){
newDf = df %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words) %>%
distinct()
return(newDf)
}
getLyricalComplexity = function(df){
lyricsDf = df %>%
select(Name, Lyrics) %>%
distinct() %>% #now have the lyrics of all of the songs
mutate(Lyrics = tolower(Lyrics)) %>% #Get all lyrics to be lower case
mutate(Lyrics = noContraction(Lyrics)) %>% #There are now no contractions besides possessives
#mutate(unlist(str_split(Lyrics, "\n", n = 1))) %>% ##############NEEED TO BE ABLE TO STRIP THE TITLE
mutate(Lyrics = gsub("[^a-z ]", " ", Lyrics)) #Remove what is not an english letter
individual = individualLyric(lyricsDf)
fullLyrics = individual %>%
group_by(Name) %>%
tally(name = "uniqueNonStop")
totalLyrics = lyricsDf %>%
unnest_tokens(word, Lyrics) %>%
group_by(Name) %>%
tally(name = "totalWords")
avgLen = individual %>%
group_by(Name) %>%
distinct() %>%
mutate(wordLength = nchar(word))%>%
mutate(wordSyllables = nsyllable(word, syllable_dictionary = quanteda::data_int_syllables,
use.names = FALSE)) %>%
select(Name, wordLength, wordSyllables) %>%
ddply(.,~Name, summarize, avgWordLen = mean(wordLength, na.rm = TRUE), avgSyllables = mean(wordSyllables))
#Get the total words by the duration
wordsByTime = df %>%
select(Name, DurationInSecs) %>%
distinct() %>%
full_join(totalLyrics, by = "Name") %>%
mutate(wordsPerSec = totalWords/DurationInSecs) %>%
select(Name, wordsPerSec)
new3 = join_all(list(fullLyrics, totalLyrics, avgLen, wordsByTime), by = "Name")
#new3 = join_all(list(fullLyrics, totalLyrics, avgLen), by = "Name")
new3$TotalToUniqueRatio = new3$totalWords/new3$uniqueNonStop
full = new3[complete.cases(new3), ]
scores = full %>%
do(data.frame(Name = full$Name, lyricalComplexity = full$avgWordLen + full$TotalToUniqueRatio + full$wordsByTime))
return(scores)
}
lyricalComplexDf = getLyricalComplexity(archArtist)
install.packages("quanteda")
library(quanteda)
noContraction = function(lyrics){
new = lyrics %>%
gsub("can't", "cannot", .) %>% #special n't
gsub("couldn't've", "could not have", .) %>%
gsub("mustn't've", "must not have", .) %>%
gsub("who'd've", "who would have", .) %>%
gsub("why'd", "why did", .) %>%
gsub("n't", " not", .) %>%
gsub("'ll", " will", .) %>%
gsub("'d", " would", .) %>%
gsub("n't", " not", .) %>%
gsub("'ve", " have", .) %>%
gsub("'re", " are", .) %>%
gsub("'cause", "because", .) %>%
gsub("there's", "there is", .) %>%
gsub("everyone's", "everyone is", .) %>%
gsub("she's", "she is", .) %>%
gsub("he's", "he is", .) %>%
gsub("it's", "it is", .) %>%
gsub("let's", "let us", .) %>%
gsub("how's", "how is", .) %>%
gsub("somebody's", "somebody is", .) %>%
gsub("someone's", "someone is", .) %>%
gsub("something's", "something is", .) %>%
gsub("that's", "that is", .) %>%
gsub("there's", "there is", .) %>%
gsub("what's", "what is", .) %>%
gsub("when's", "when is", .) %>%
gsub("where's", "where is", .) %>%
gsub("who's", "who is", .) %>%
gsub("gonna", "going to", .) %>%
gsub("gotta", "got to", .) %>%
gsub("gimme", "give me", .)%>%
gsub("tryna", "trying to", .) %>%
gsub("i'm'a", "i am about to", .)%>%
gsub("i'm", "i am", .) %>%
gsub("gimme", "give me", .) %>%
gsub("y'all", "you all", .)
return(new)
}
individualLyric = function(df){
newDf = df %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words) %>%
distinct()
return(newDf)
}
getLyricalComplexity = function(df){
lyricsDf = df %>%
select(Name, Lyrics) %>%
distinct() %>% #now have the lyrics of all of the songs
mutate(Lyrics = tolower(Lyrics)) %>% #Get all lyrics to be lower case
mutate(Lyrics = noContraction(Lyrics)) %>% #There are now no contractions besides possessives
#mutate(unlist(str_split(Lyrics, "\n", n = 1))) %>% ##############NEEED TO BE ABLE TO STRIP THE TITLE
mutate(Lyrics = gsub("[^a-z ]", " ", Lyrics)) #Remove what is not an english letter
individual = individualLyric(lyricsDf)
fullLyrics = individual %>%
group_by(Name) %>%
tally(name = "uniqueNonStop")
totalLyrics = lyricsDf %>%
unnest_tokens(word, Lyrics) %>%
group_by(Name) %>%
tally(name = "totalWords")
avgLen = individual %>%
group_by(Name) %>%
distinct() %>%
mutate(wordLength = nchar(word))%>%
mutate(wordSyllables = nsyllable(word, syllable_dictionary = quanteda::data_int_syllables,
use.names = FALSE)) %>%
select(Name, wordLength, wordSyllables) %>%
ddply(.,~Name, summarize, avgWordLen = mean(wordLength, na.rm = TRUE), avgSyllables = mean(wordSyllables))
#Get the total words by the duration
wordsByTime = df %>%
select(Name, DurationInSecs) %>%
distinct() %>%
full_join(totalLyrics, by = "Name") %>%
mutate(wordsPerSec = totalWords/DurationInSecs) %>%
select(Name, wordsPerSec)
new3 = join_all(list(fullLyrics, totalLyrics, avgLen, wordsByTime), by = "Name")
#new3 = join_all(list(fullLyrics, totalLyrics, avgLen), by = "Name")
new3$TotalToUniqueRatio = new3$totalWords/new3$uniqueNonStop
full = new3[complete.cases(new3), ]
scores = full %>%
do(data.frame(Name = full$Name, lyricalComplexity = full$avgWordLen +full$avgSyllables +full$TotalToUniqueRatio))
return(scores)
}
lyricalComplexDf = getLyricalComplexity(archArtist)
lyricalComplexDf
install.packages("quanteda")
library(quanteda)
noContraction = function(lyrics){
new = lyrics %>%
gsub("can't", "cannot", .) %>% #special n't
gsub("couldn't've", "could not have", .) %>%
gsub("mustn't've", "must not have", .) %>%
gsub("who'd've", "who would have", .) %>%
gsub("why'd", "why did", .) %>%
gsub("n't", " not", .) %>%
gsub("'ll", " will", .) %>%
gsub("'d", " would", .) %>%
gsub("n't", " not", .) %>%
gsub("'ve", " have", .) %>%
gsub("'re", " are", .) %>%
gsub("'cause", "because", .) %>%
gsub("there's", "there is", .) %>%
gsub("everyone's", "everyone is", .) %>%
gsub("she's", "she is", .) %>%
gsub("he's", "he is", .) %>%
gsub("it's", "it is", .) %>%
gsub("let's", "let us", .) %>%
gsub("how's", "how is", .) %>%
gsub("somebody's", "somebody is", .) %>%
gsub("someone's", "someone is", .) %>%
gsub("something's", "something is", .) %>%
gsub("that's", "that is", .) %>%
gsub("there's", "there is", .) %>%
gsub("what's", "what is", .) %>%
gsub("when's", "when is", .) %>%
gsub("where's", "where is", .) %>%
gsub("who's", "who is", .) %>%
gsub("gonna", "going to", .) %>%
gsub("gotta", "got to", .) %>%
gsub("gimme", "give me", .)%>%
gsub("tryna", "trying to", .) %>%
gsub("i'm'a", "i am about to", .)%>%
gsub("i'm", "i am", .) %>%
gsub("gimme", "give me", .) %>%
gsub("y'all", "you all", .)
return(new)
}
individualLyric = function(df){
newDf = df %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words) %>%
distinct()
return(newDf)
}
getLyricalComplexity = function(df){
lyricsDf = df %>%
select(Name, Lyrics) %>%
distinct() %>% #now have the lyrics of all of the songs
mutate(Lyrics = tolower(Lyrics)) %>% #Get all lyrics to be lower case
mutate(Lyrics = noContraction(Lyrics)) %>% #There are now no contractions besides possessives
#mutate(unlist(str_split(Lyrics, "\n", n = 1))) %>% ##############NEEED TO BE ABLE TO STRIP THE TITLE
mutate(Lyrics = gsub("[^a-z ]", " ", Lyrics)) #Remove what is not an english letter
individual = individualLyric(lyricsDf)
fullLyrics = individual %>%
group_by(Name) %>%
tally(name = "uniqueNonStop")
totalLyrics = lyricsDf %>%
unnest_tokens(word, Lyrics) %>%
group_by(Name) %>%
tally(name = "totalWords")
avgLen = individual %>%
group_by(Name) %>%
distinct() %>%
mutate(wordLength = nchar(word))%>%
mutate(wordSyllables = nsyllable(word, syllable_dictionary = quanteda::data_int_syllables,
use.names = FALSE)) %>%
select(Name, wordLength, wordSyllables) %>%
ddply(.,~Name, summarize, avgWordLen = mean(wordLength, na.rm = TRUE), avgSyllables = mean(wordSyllables))
#Get the total words by the duration
wordsByTime = df %>%
select(Name, DurationInSecs) %>%
distinct() %>%
full_join(totalLyrics, by = "Name") %>%
mutate(wordsPerSec = totalWords/DurationInSecs) %>%
select(Name, wordsPerSec)
print(wordsByTime)
new3 = join_all(list(fullLyrics, totalLyrics, avgLen, wordsByTime), by = "Name")
#new3 = join_all(list(fullLyrics, totalLyrics, avgLen), by = "Name")
new3$TotalToUniqueRatio = new3$totalWords/new3$uniqueNonStop
full = new3[complete.cases(new3), ]
scores = full %>%
do(data.frame(Name = full$Name, lyricalComplexity = full$avgWordLen +full$avgSyllables +full$TotalToUniqueRatio ))
return(scores)
}
lyricalComplexDf = getLyricalComplexity(archArtist)
library(quanteda)
noContraction = function(lyrics){
new = lyrics %>%
gsub("can't", "cannot", .) %>% #special n't
gsub("couldn't've", "could not have", .) %>%
gsub("mustn't've", "must not have", .) %>%
gsub("who'd've", "who would have", .) %>%
gsub("why'd", "why did", .) %>%
gsub("n't", " not", .) %>%
gsub("'ll", " will", .) %>%
gsub("'d", " would", .) %>%
gsub("n't", " not", .) %>%
gsub("'ve", " have", .) %>%
gsub("'re", " are", .) %>%
gsub("'cause", "because", .) %>%
gsub("there's", "there is", .) %>%
gsub("everyone's", "everyone is", .) %>%
gsub("she's", "she is", .) %>%
gsub("he's", "he is", .) %>%
gsub("it's", "it is", .) %>%
gsub("let's", "let us", .) %>%
gsub("how's", "how is", .) %>%
gsub("somebody's", "somebody is", .) %>%
gsub("someone's", "someone is", .) %>%
gsub("something's", "something is", .) %>%
gsub("that's", "that is", .) %>%
gsub("there's", "there is", .) %>%
gsub("what's", "what is", .) %>%
gsub("when's", "when is", .) %>%
gsub("where's", "where is", .) %>%
gsub("who's", "who is", .) %>%
gsub("gonna", "going to", .) %>%
gsub("gotta", "got to", .) %>%
gsub("gimme", "give me", .)%>%
gsub("tryna", "trying to", .) %>%
gsub("i'm'a", "i am about to", .)%>%
gsub("i'm", "i am", .) %>%
gsub("gimme", "give me", .) %>%
gsub("y'all", "you all", .)
return(new)
}
individualLyric = function(df){
newDf = df %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words) %>%
distinct()
return(newDf)
}
getLyricalComplexity = function(df){
lyricsDf = df %>%
select(Name, Lyrics) %>%
distinct() %>% #now have the lyrics of all of the songs
mutate(Lyrics = tolower(Lyrics)) %>% #Get all lyrics to be lower case
mutate(Lyrics = noContraction(Lyrics)) %>% #There are now no contractions besides possessives
#mutate(unlist(str_split(Lyrics, "\n", n = 1))) %>% ##############NEEED TO BE ABLE TO STRIP THE TITLE
mutate(Lyrics = gsub("[^a-z ]", " ", Lyrics)) #Remove what is not an english letter
individual = individualLyric(lyricsDf)
fullLyrics = individual %>%
group_by(Name) %>%
tally(name = "uniqueNonStop")
totalLyrics = lyricsDf %>%
unnest_tokens(word, Lyrics) %>%
group_by(Name) %>%
tally(name = "totalWords")
avgLen = individual %>%
group_by(Name) %>%
distinct() %>%
mutate(wordLength = nchar(word))%>%
mutate(wordSyllables = nsyllable(word, syllable_dictionary = quanteda::data_int_syllables,
use.names = FALSE)) %>%
select(Name, wordLength, wordSyllables) %>%
ddply(.,~Name, summarize, avgWordLen = mean(wordLength, na.rm = TRUE), avgSyllables = mean(wordSyllables))
print(avgLen)
#Get the total words by the duration
wordsByTime = df %>%
select(Name, DurationInSecs) %>%
distinct() %>%
full_join(totalLyrics, by = "Name") %>%
mutate(wordsPerSec = totalWords/DurationInSecs) %>%
select(Name, wordsPerSec)
print(wordsByTime)
new3 = join_all(list(fullLyrics, totalLyrics, avgLen, wordsByTime), by = "Name")
#new3 = join_all(list(fullLyrics, totalLyrics, avgLen), by = "Name")
new3$TotalToUniqueRatio = new3$totalWords/new3$uniqueNonStop
full = new3[complete.cases(new3), ]
scores = full %>%
do(data.frame(Name = full$Name, lyricalComplexity = full$avgWordLen +full$avgSyllables +full$TotalToUniqueRatio ))
return(scores)
}
lyricalComplexDf = getLyricalComplexity(archArtist)
library(tidyverse)
library(tidytext)
library(tools)
library(stringr)
billboardDf = read.csv("FrostData/billboardRankings.csv")
